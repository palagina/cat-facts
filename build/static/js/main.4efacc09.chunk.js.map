{"version":3,"sources":["services/facts.js","components/Fact.js","components/FactList.js","components/LoadSpinner.js","components/NewFactsButton.js","App.js","serviceWorker.js","index.js"],"names":["getFacts","a","fiveFactsUrl","axios","get","response","data","console","log","toast","error","toString","Fact","fact","List","Item","Icon","name","size","verticalAlign","Content","text","FactList","facts","divided","relaxed","animated","map","id","key","LoadSpinner","Segment","Dimmer","active","inverted","Loader","content","NewFactsButton","setFacts","Container","textAlign","Button","primary","onClick","setTimeout","factService","then","initialFacts","catch","message","App","useState","useEffect","Header","as","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kTAqBiB,GAAEA,SAbL,uCAAG,8BAAAC,EAAA,sEAEPC,EAFO,UAND,iCAMC,mCAGUC,IAAMC,IAAIF,GAHpB,cAGPG,EAHO,yBAMNA,EAASC,MANH,gCAQbC,QAAQC,IAAR,MACAC,QAAMC,MAAM,KAAMC,YATL,yDAAH,sD,SCICC,EATF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACZ,OACE,kBAACC,EAAA,EAAKC,KAAN,KACE,kBAACD,EAAA,EAAKE,KAAN,CAAWC,KAAK,sBAAsBC,KAAK,QAAQC,cAAc,WACjE,kBAACL,EAAA,EAAKM,QAAN,KAAeP,EAAKQ,KAApB,OCWOC,EAdE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MASlB,OACI,kBAACT,EAAA,EAAD,CAAMU,SAAO,EAACC,SAAO,EAACC,UAAQ,EAACP,cAAc,UAR/CI,EAAMI,KAAI,SAACd,EAAMe,GAAP,OACN,kBAAC,EAAD,CACEC,IAAKD,EACLf,KAAMA,S,2BCICiB,EAVG,WAChB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAM,EAACC,UAAQ,GACrB,kBAACC,EAAA,EAAD,CAAQC,QAAQ,qBAAqBlB,KAAK,Y,kBCqBrCmB,EAxBQ,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAiBvB,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,UACnB,kBAACC,EAAA,EAAD,CAAQC,SAAO,EAACC,QAhBI,WACpBL,EAAS,IACTM,YAAW,WACTC,EACC7C,WACA8C,MAAK,SAAAC,GACJT,EAASS,MAEVC,OAAM,SAAAtC,GACLH,QAAQC,IAAIE,EAAMuC,cAEnB,MAKqCb,QAAQ,gB,SCgBvCc,G,cA7BH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACT5B,EADS,KACFe,EADE,KAehB,OAZAc,qBAAU,WACRP,EACG7C,WACA8C,MAAK,SAAAC,GACJT,EAASS,MAEVC,OAAM,SAAAtC,GACLH,QAAQC,IAAIE,GACZD,QAAMC,MAAMA,EAAMC,iBAErB,IAGD,kBAAC4B,EAAA,EAAD,KACE,kBAACc,EAAA,EAAD,CAAQC,GAAG,KAAKd,UAAU,UAA1B,oBAGA,kBAACD,EAAA,EAAD,KACMhB,GAAsB,IAAfA,EAAMgC,OAAgC,kBAAC,EAAD,CAAUhC,MAAOA,IAAnC,kBAAC,EAAD,OAEjC,kBAAC,EAAD,CAAgBe,SAAUA,IAC1B,kBAAC,iBAAD,SCtBckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAtC,GACLH,QAAQG,MAAMA,EAAMuC,c","file":"static/js/main.4efacc09.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nconst baseUrl = 'https://cat-fact.herokuapp.com';\r\n//const corsAnywhere = \"https://cors-anywhere.herokuapp.com\"\r\n\r\n//In case the browser throws a cross-origin error it is possible to use corsAnywhere instead\r\n\r\n//get 5 random facts\r\nconst getFacts = async () => {\r\n  try{\r\n    const fiveFactsUrl = `${baseUrl}/facts/random?amount=5`;\r\n    const response = await axios.get(fiveFactsUrl);\r\n    //const fiveFactsUrl = `${corsAnywhere}/${baseUrl}/facts/random?amount=5`;\r\n    //const response = await axios.get(fiveFactsUrl);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n    toast.error(error.toString())\r\n  }\r\n};\r\n\r\n  export default { getFacts }","import React from \"react\";\r\nimport { List } from \"semantic-ui-react\";\r\n\r\nconst Fact = ({ fact }) => {\r\n    return (\r\n      <List.Item >\r\n        <List.Icon name='sticky note outline' size='large' verticalAlign='middle' />\r\n        <List.Content>{fact.text} </List.Content>\r\n      </List.Item>\r\n    );\r\n}\r\n\r\nexport default Fact;","import React from \"react\";\r\nimport Fact from \"./Fact\";\r\nimport { List } from \"semantic-ui-react\"\r\n\r\nconst FactList = ({ facts }) => {\r\n  const factList = () =>\r\n    facts.map((fact, id) => (\r\n        <Fact\r\n          key={id}\r\n          fact={fact}\r\n        />\r\n      ));\r\n\r\n  return (\r\n      <List divided relaxed animated verticalAlign='middle'>{factList()}</List>\r\n  );\r\n}\r\n\r\nexport default FactList;","import React from \"react\";\r\nimport { Segment, Dimmer, Loader } from \"semantic-ui-react\"\r\n\r\nconst LoadSpinner = () => {\r\n    return (\r\n      <Segment >\r\n        <Dimmer active inverted>\r\n          <Loader content='Loading more facts' size=\"huge\"/>\r\n        </Dimmer>\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  export default LoadSpinner;","import React from 'react'\r\nimport factService from \"../services/facts\"\r\nimport { Button, Container } from \"semantic-ui-react\";\r\n\r\nconst NewFactsButton = ({setFacts}) => {\r\n\r\n  //sends GET request with a 1sec timeout\r\n    const fetchNewFacts = () => {\r\n      setFacts([]);\r\n      setTimeout(() => {\r\n        factService\r\n        .getFacts()\r\n        .then(initialFacts => {\r\n          setFacts(initialFacts);\r\n        })\r\n        .catch(error => {\r\n          console.log(error.message);\r\n        });\r\n      }, 1000);\r\n    };\r\n\r\n  return (\r\n    <Container textAlign='center'>\r\n      <Button primary onClick={fetchNewFacts} content=\"New facts\" />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default NewFactsButton","import React, { useState, useEffect } from \"react\"\r\nimport factService from \"./services/facts\"\r\nimport FactList from \"./components/FactList\"\r\nimport LoadSpinner from \"./components/LoadSpinner\"\r\nimport NewFactsButton from \"./components/NewFactsButton\"\r\nimport { Container, Header } from \"semantic-ui-react\"\r\nimport 'react-toastify/dist/ReactToastify.min.css' \r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport './styles.css'\r\n\r\nconst App = () => {\r\n  const [facts, setFacts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    factService\r\n      .getFacts()\r\n      .then(initialFacts => {\r\n        setFacts(initialFacts)\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        toast.error(error.toString())\r\n      })\r\n  }, [])\r\n\r\n  return (\r\n    <Container>\r\n      <Header as=\"h1\" textAlign=\"center\">\r\n        Random cat facts\r\n      </Header>\r\n      <Container>\r\n        { (!facts||facts.length===0) ? <LoadSpinner /> : <FactList facts={facts} />}\r\n      </Container>\r\n      <NewFactsButton setFacts={setFacts} />\r\n      <ToastContainer />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}